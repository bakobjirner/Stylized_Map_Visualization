// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

float Resolution;
float Thickness;
float NumberOfPoints;

struct Point {
    float x;
    float y;
};

RWStructuredBuffer<Point> points;

[numthreads(8,8,1)]
void CSMain (int3 id : SV_DispatchThreadID)
{
    float x = (id.x / Resolution - 0.5) * 360;
    float y = (id.y / Resolution - 0.5) * 180;
    float z = 0.0;

    float r = 0;
    float g = 0;
    float b = 0;


    for(int i = 0; i< NumberOfPoints; i++){
        //draw points
        float distance = sqrt((points[i].x - x) * (points[i].x - x) + (points[i].y - y) * (points[i].y - y));
        if (distance < Thickness) {
            g = 1;
        }
    }

    Result[id.xy] = float4(r,g,b, 0.0);
}